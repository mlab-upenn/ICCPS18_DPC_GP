% Feature selection code using GPML.
%
% Perform feature selection for the control prediction model
% The idea is to use the ARD squared exponential covariance function for
% various combinations of inputs and lags, then inspect the prediction
% performance and the length scales to select the features.
% The GP structure is ARX.
% For this purpose, we don't need to use too many data points.
% This code uses/bases on the GPDyn toolbox.

%% Load and prepare data
dr_timestep = 15;       % The time step in minutes                               
stepsperhour = 60 / dr_timestep;

% UPDATE the data_train_type and postfix as well

% datafname = 'random_sampling_uniform_2ramped_3input_15day_20170924_1913.mat';
% data_train_type = 'random_sampling_uniform_2ramped_3input';

datafname = 'random_sampling_uniform_3input_15day_20170921_0625.mat';
data_train_type = 'random_sampling_uniform_3input';

% datafname = 'doe_sampling_noreset_IG_3input_15day_20170921_1052.mat';
% data_train_type = 'doe_sampling_noreset_IG_3input';

% datafname = 'doe_sampling_noreset_IG_2ramped_3input_15day_20170924_2357.mat';
% data_train_type = 'doe_sampling_noreset_IG_2ramped_3input';

% datafname = 'random_sampling_prbs_3input_15day_20170921_0742';
% data_train_type = 'random_sampling_prbs_3input';

% datafname = 'unconstrained-LargeHotel';
% data_train_type = 'fullset';

data_train = load(fullfile('..', 'data', datafname));

postfix = '7days_truongkernel';

% Number of data points to use for identification
ident_len = [1, min(length(data_train.TOD), 24*stepsperhour*7)];
data_train = slice_data(data_train, ident_len);

% Normalize the data (not all fields)
normalized_fields = {'Ambient', 'Humidity', 'TotalLoad', 'ClgSP', 'KitchenClgSP', 'GuestClgSP', 'SupplyAirSP', 'ChwSP'};
[data_train_norm, normparams] = normalize_data(data_train, normalized_fields);

datafname = 'test-unconstrained-LargeHotel'; %'test-LargeHotel'; 'test-ramped2-LargeHotel'
data_test = load(fullfile('..', 'data', datafname));

% Normalize the data (same as for training)
data_test_norm = normalize_data(data_test, normalized_fields, normparams);

% Inline if
iif = @(varargin) varargin{2*find([varargin{1:2:end}], 1, 'first')}();

%% Train and validate for each stepsahead value

for stepsahead = 0:0
    %{
    % OED (14days)
    model_inputs = {...
        {'Ambient', [1,0]}, ...
        {'Humidity', 2}, ...
        {'TotalLoad', 3:-1:1}, ...
        'TOD', ...
        {'ClgSP', 2:-1:0}, ...
        {'KitchenClgSP', 2:-1:0}, ...
        {'GuestClgSP', [2, 1, 0]}, ...
        {'SupplyAirSP', 3:-1:0}, ...
        {'ChwSP', [3, 1, 0]}};
    %}
    
    %{
    % OED (7 days)
    model_inputs = {...
        {'Ambient', [1,0]}, ...
        {'Humidity', 2}, ...
        {'TotalLoad', 3:-1:1}, ...
        'TOD', ...
        {'ClgSP', 0}, ...
        {'KitchenClgSP', 0}, ...
        {'GuestClgSP', 0}, ...
        {'SupplyAirSP', [2, 0]}, ...
        {'ChwSP', [1, 0]}};
    %}
    
    %{
    % OED (3 days)
    model_inputs = {...
        {'Ambient', [1,0]}, ...
        {'Humidity', 2}, ...
        {'TotalLoad', 2:-1:1}, ...
        'TOD', ...
        {'ClgSP', 0}, ...
        {'KitchenClgSP', 0}, ...
        {'GuestClgSP', 0}, ...
        {'SupplyAirSP', [2, 0]}, ...
        {'ChwSP', [1, 0]}};
    %}
    
    %{
    % Random Uniform (14days)
    model_inputs = {...
        {'Ambient', [3,0]}, ...
        {'Humidity', [3, 0]}, ...
        {'TotalLoad', 3:-1:1}, ...
        'TOD', ... 
        {'ClgSP', 0}, ... 
        {'KitchenClgSP', 0}, ...
        {'GuestClgSP', 3:-1:0}, ...
        {'SupplyAirSP', 2:-1:0}, ...
        {'ChwSP', 3:-1:0}};
    %}
    
    %{
    % Random uniform (7days)
    model_inputs = {...
        {'Ambient', [3,0]}, ...
        {'Humidity', [3, 0]}, ...
        {'TotalLoad', 3:-1:1}, ...
        'TOD', ... 
        {'GuestClgSP', 0}, ... 
        {'SupplyAirSP', 1:-1:0}, ...
        {'ChwSP', 3:-1:0}};
    %}
    
    %{
    % Random uniform (3days)
    model_inputs = {...
        {'Ambient', [3,0]}, ...
        {'Humidity', 0}, ...
        {'TotalLoad', 3:-1:2}, ...
        'TOD', ... %{'ClgSP', 0}, ... {'KitchenClgSP', 0}, ...
        {'GuestClgSP', [2, 0]}, ... % {'SupplyAirSP', 2:-1:0}, ...
        {'ChwSP', 1:-1:0}};
    %}
    
    %{
    % Random PRBS (14 days)
    model_inputs = {...
        {'Ambient', [1,0]}, ...
        {'Humidity', 1}, ...
        {'TotalLoad', 3:-1:1}, ...
        'TOD', ... %'DOW', ...
        {'ClgSP', [3, 0]}, ... 
        {'KitchenClgSP', [3, 0]}, ...
        {'GuestClgSP', 3:-1:0}, ...
        {'SupplyAirSP', 3:-1:0}, ...
        {'ChwSP', 3:-1:0}};
    %}
    
    %{
    % Random PRBS (7 days)
    model_inputs = {...
        {'Ambient', [1,0]}, ...
        {'Humidity', 1}, ...
        {'TotalLoad', 3:-1:1}, ...
        'TOD', ... %'DOW', ...
        {'ClgSP', [3, 0]}, ... 
        {'KitchenClgSP', [3, 0]}, ...
        {'GuestClgSP', [3, 1, 0]}, ...
        {'SupplyAirSP', [3, 1, 0]}, ...
        {'ChwSP', [3, 1, 0]}};
    %}
    
    %{
    % Random PRBS (3 days)
    model_inputs = {...
        {'Ambient', [3 1]}, ...
        {'Humidity', 0}, ...
        {'TotalLoad', [3 2]}, ...
        'TOD', ... %'DOW', ...
        {'ClgSP', 3}, ... 
        {'KitchenClgSP', 3}, ...
        {'GuestClgSP', [1 0]}, ...
        {'SupplyAirSP', [1 0]}, ...
        {'ChwSP', [1 0]}};
    %}
    
    %{
    % OED prior (14days)
    model_inputs = {...
        {'Ambient', 3:-1:0}, ...
        {'Humidity', 3:-1:0}, ...
        {'TotalLoad', 3:-1:1}, ...
        'TOD', 'DOW', ...
        {'ClgSP', 3:-1:0}, ...
        {'KitchenClgSP', 3:-1:0}, ...
        {'GuestClgSP', [3, 2, 1, 0]}, ...
        {'SupplyAirSP', 3:-1:0}, ...
        {'ChwSP', [3, 2, 1, 0]}};
    %}
    
    %{
    % Random uniform - Truong's kernel (7days)
    model_inputs = {...
        'TOD', ... 
        {'Ambient', [3 0]}, ...
        {'Humidity', 0}, ...
        {'TotalLoad', [3 1]}, ...
        {'GuestClgSP', 0}, ... 
        {'SupplyAirSP', 1:-1:0}, ...
        {'ChwSP', 3:-1:0}};
    %}
    
    %{
    % Random uniform - Truong's kernel (3days)
    model_inputs = {...
        'TOD', ...
        {'Ambient', [3 0]}, ...
        {'Humidity', 2}, ...
        {'TotalLoad', [3 2]}, ... %   {'ClgSP', [3 2 1 0]}, ... {'KitchenClgSP', [3 2 1 0]}, ...
        {'GuestClgSP', 0}, ...
        {'SupplyAirSP', 0}, ...
        {'ChwSP', [1 0]}};
    %}
    
    %{
    % Random uniform - Truong's kernel (14 days)
    model_inputs = {...
        'TOD', ...
        {'Ambient', [3 0]}, ...
        {'Humidity', 0}, ...
        {'TotalLoad', [3 2 1]}, ...
        {'ClgSP', [3 0]}, ... 
        {'KitchenClgSP', [3 0]}, ...
        {'GuestClgSP', [3 2 1 0]}, ...
        {'SupplyAirSP', [3 1 0]}, ...
        {'ChwSP', [3 2 1 0]}};
    %}
    
    %{
    % Random uniform - Truong's kernel - ramped (3days)
    model_inputs = {...
        'TOD', ...
        {'Ambient', [3 1 0]}, ...
        {'Humidity', [1 0]}, ...
        {'TotalLoad', [3 2 1]}, ... 
        {'ClgSP', [3 0]}, ... 
        {'KitchenClgSP', [3 0]}, ...
        {'GuestClgSP', 0}, ...
        {'SupplyAirSP', [3 1 0]}, ...
        {'ChwSP', [3 2 1 0]}};
    %}
        
    %{
    % Random uniform - Truong's kernel - ramped (4 days)
    model_inputs = {...
        'TOD', ...
        {'Ambient', [3 0]}, ...
        {'Humidity', 1}, ...
        {'TotalLoad', [3 2 1]}, ...
        {'ClgSP', 0}, ... 
        {'KitchenClgSP', 0}, ...
        {'GuestClgSP', [3 1 0]}, ...
        {'SupplyAirSP', [3 1 0]}, ...
        {'ChwSP', [3 2 1 0]}};
    %}

    %{
    % Random uniform - Truong's kernel - ramped (7days)
    model_inputs = {...
        'TOD', ... 
        {'Ambient', [3 0]}, ...
        {'Humidity', 0}, ...
        {'TotalLoad', [3 1]}, ...
        {'GuestClgSP', 0}, ... 
        {'SupplyAirSP', 1:-1:0}, ...
        {'ChwSP', 3:-1:0}};
    %}
    
    %{
    % Random uniform - Truong's kernel - ramped (14days)
    model_inputs = {...
        'TOD', ... 
        {'Ambient', [2 0]}, ...
        {'Humidity', [2 0]}, ...
        {'TotalLoad', [3 2 1]}, ... %        {'ClgSP', [3 2 1 0]}, ... {'KitchenClgSP', [3 2 1 0]}, ...
        {'GuestClgSP', [3 2 1 0]}, ... 
        {'SupplyAirSP', [3 1 0]}, ...
        {'ChwSP', [3 2 1 0]}};
    %}
           
    %{
    % OED - Truong's kernel (14 days)
    model_inputs = {...
        'TOD', ...
        {'Ambient', [3 1 0]}, ...
        {'Humidity', 0}, ...
        {'TotalLoad', [3 2 1]}, ...
        {'ClgSP', [3 1 0]}, ... 
        {'KitchenClgSP', [3 1 0]}, ...
        {'GuestClgSP', [1 0]}, ...
        {'SupplyAirSP', [3 2 1 0]}, ...
        {'ChwSP', [3 2 1 0]}};
    %}
    
    %{
    % OED - Truong's kernel (7 days)
    model_inputs = {...
        'TOD', ...
        {'Ambient', [2 0]}, ...
        {'Humidity', 1}, ...
        {'TotalLoad', [3 2 1]}, ...
        {'ClgSP', [3 2 0]}, ... 
        {'KitchenClgSP', [3 2 0]}, ...
        {'GuestClgSP', [3 1 0]}, ...
        {'SupplyAirSP', [3 2 1 0]}, ...
        {'ChwSP', [3 2 1 0]}};
    %}
    
    %{
    % OED - Truong's kernel (3 days)
    model_inputs = {...
        'TOD', ...
        {'Ambient', [3 0]}, ...
        {'Humidity', [3 0]}, ...
        {'TotalLoad', 1}, ...
        {'ClgSP', 2}, ... 
        {'KitchenClgSP', 2}, ...
        {'GuestClgSP', 0}, ...
        {'SupplyAirSP', [2 0]}, ...
        {'ChwSP', [3 2 1 0]}};
    %}
        
    %{
    % Random PRBS - Truong's kernel (14 days)
    model_inputs = {...
        'TOD', ...
        {'Ambient', [3 0]}, ...
        {'Humidity', 1}, ...
        {'TotalLoad', [3 2 1]}, ...
        {'ClgSP', [3 0]}, ... 
        {'KitchenClgSP', [3 0]}, ...
        {'GuestClgSP', [3 2 1 0]}, ...
        {'SupplyAirSP', [3 2 1 0]}, ...
        {'ChwSP', [3 2 1 0]}};
    %}
    
    %{
    % Random PRBS - Truong's kernel (7 days)
    model_inputs = {...
        'TOD', ...
        {'Ambient', [1 0]}, ...
        {'Humidity', 1}, ...
        {'TotalLoad', [3 2 1]}, ...
        {'ClgSP', [3 0]}, ... 
        {'KitchenClgSP', [3 0]}, ...
        {'GuestClgSP', [3 2 1 0]}, ...
        {'SupplyAirSP', [3 2 1 0]}, ...
        {'ChwSP', [3 2 1 0]}};
    %}
    
    %{
    % Random PRBS - Truong's kernel (3 days)
    model_inputs = {...
        'TOD', ...
        {'Ambient', [2 0]}, ...
        {'Humidity', 1}, ...
        {'TotalLoad', 1}, ... % {'ClgSP', [3 2 1 0]}, ... {'KitchenClgSP', [3 2 1 0]}, ...
        {'GuestClgSP', [3 2 1 0]}, ...
        {'SupplyAirSP', [3 2 1 0]}, ...
        {'ChwSP', [3 2 1 0]}};    
    %}
    
    %{
    % OED - Truong's kernel - ramped (3 days)
        model_inputs = {...
        'TOD', ...
        {'Ambient', [3 0]}, ...
        {'Humidity', [3 0]}, ...
        {'TotalLoad', 1}, ...
        {'ClgSP', 2}, ... 
        {'KitchenClgSP', 2}, ...
        {'GuestClgSP', 0}, ...
        {'SupplyAirSP', [2 0]}, ...
        {'ChwSP', [3 2 1 0]}};
    %}
    
    %{
    % OED - Truong's kernel - ramped (7 days)
    model_inputs = {...
        'TOD', ...
        {'Ambient', [2 0]}, ...
        {'Humidity', [2 0]}, ...
        {'TotalLoad', [3 2 1]}, ...
        {'ClgSP', [0]}, ... 
        {'KitchenClgSP', [0]}, ...
        {'GuestClgSP', [3 1 0]}, ...
        {'SupplyAirSP', [3 1 0]}, ...
        {'ChwSP', [3 2 1 0]}};
    %}
        
    %{
    % OED - Truong's kernel - ramped (4 days)
    model_inputs = {...
        'TOD', ...
        {'Ambient', [2 0]}, ...
        {'Humidity', [1]}, ...
        {'TotalLoad', [3 2 1]}, ...
        {'ClgSP', [2 0]}, ... 
        {'KitchenClgSP', [2 0]}, ...
        {'GuestClgSP', [2 1 0]}, ...
        {'SupplyAirSP', [2 1 0]}, ...
        {'ChwSP', [3 2 1 0]}};
    %}
    
    %{
    % OED - Truong's kernel - ramped (14 days)
    model_inputs = {...
        'TOD', ...
        {'Ambient', [3 1 0]}, ...
        {'Humidity', 0}, ...
        {'TotalLoad', [3 2 1]}, ...
        {'ClgSP', [3 0]}, ... 
        {'KitchenClgSP', [3 0]}, ...
        {'GuestClgSP', [3 1 0]}, ...
        {'SupplyAirSP', [3 2 1 0]}, ...
        {'ChwSP', [3 2 1 0]}};
    %}
    
    model_target = 'TotalLoad';
    model_excepts = {'TOD', 'DOW'};
    
    [Xtrain_norm, Ytrain_norm] = construct_data(data_train_norm, model_inputs, model_target, stepsahead, model_excepts);
    nInputs = size(Xtrain_norm, 2);  

    %{
    % SE-ARD
    model = struct;
    model.covariance_function = 'covSEard';
    model.mean_function = 'meanConst';
    model.likelihood = 'likGauss';
    %}
    
    %{
    % Truong's kernel
    model = struct;
    model.covariance_function = {'covSum', {'covSEard', {'covMask', {1, 'covRQiso'}}}};
    model.mean_function = 'meanConst';
    model.likelihood = 'likGauss';
    %}
    
    
    % Truong's kernel (no TOD in first component)
    model = struct;
    model.covariance_function = {'covProd', {{'covSum', {'covConst', {'covMask', {2:nInputs, 'covSEard'}}}}, {'covMask', {1, 'covRQiso'}}}};
    model.mean_function = 'meanConst';
    model.likelihood = 'likGauss';
    
    
    %{
    % Assign prior (for OED)
    nD = size(Xtrain_norm, 2);
    model.prior = struct;
    model.prior.cov = repmat({{'priorGauss', 0, 1}}, gpml_numhyps(model.covariance_function, nD), 1);
    model.prior.mean = repmat({{'priorGauss', 0, 1}}, gpml_numhyps(model.mean_function, nD), 1);
    model.prior.lik = repmat({{'priorGauss', 0, 1}}, gpml_numhyps(model.likelihood, nD), 1);
    %}
    
    hyp0 = struct;
    %hyp0 = load('feature_selection/random_sampling_uniform_3input_ahead00_14days_final', 'training_result');
    %hyp0 = hyp0.training_result.hyp;
    %hyp0.cov(hyp0.cov > 10) = [];
    
    %{
    hypnames = [arrayfun(@(d) ['y', num2str(d)], lag_y, 'UniformOutput', false),...
        arrayfun(@(d) ['u', num2str(d)], lag_dr, 'UniformOutput', false),...
        arrayfun(@(d) ['Ta', num2str(d)], lag_Ta, 'UniformOutput', false),...
        arrayfun(@(d) ['h', num2str(d)], lag_humid, 'UniformOutput', false),...
        {'t', 'sf'}]';
    %}
    
    %{
    % SE * Matern
    % Construct the covariance function
    cov = {'covProd', {...
        {'covMask', {1:Nins, 'covSEard'}},...
        {'covMask', {Nins+1, {'covMaterniso', 3}}}} ...  % temporal
        };
    
    hypcov = [...
        zeros(1, Nins), 0, ...    % non-temporal
        0, 0 ...  % temporal
        ]';
    
    hypnames = [arrayfun(@(d) ['y', num2str(d)], lag_y, 'UniformOutput', false),...
        arrayfun(@(d) ['u', num2str(d)], lag_dr, 'UniformOutput', false),...
        arrayfun(@(d) ['Ta', num2str(d)], lag_Ta, 'UniformOutput', false),...
        arrayfun(@(d) ['h', num2str(d)], lag_humid, 'UniformOutput', false),...
        {'sf', 't', 'sf'}]';
    %}
    
    %{
    % SE * RQ
    % Construct the covariance function
    cov = {'covProd', {...
        {'covMask', {1:Nins, 'covSEard'}},...
        {'covMask', {Nins+1, 'covRQiso'}}} ...  % temporal
        };
    
    hypcov = [...
        zeros(1, Nins), 0, ...    % non-temporal
        0, 0, 0 ...  % temporal
        ]';
    
    hypnames = [arrayfun(@(d) ['y', num2str(d)], lag_y, 'UniformOutput', false),...
        arrayfun(@(d) ['u', num2str(d)], lag_dr, 'UniformOutput', false),...
        arrayfun(@(d) ['Ta', num2str(d)], lag_Ta, 'UniformOutput', false),...
        arrayfun(@(d) ['h', num2str(d)], lag_humid, 'UniformOutput', false),...
        {'sf', 't', 'sf', 'alpha'}]';
    %}
    
    %{
    % (SE + Const)*RQ
    % Construct the covariance function
    cov = {'covProd', {...
        {'covMask', {1:Nins, {'covSum', {'covConst', 'covSEard'}}}},...
        {'covMask', {Nins+1, 'covRQiso'}}} ...  % temporal
        };
    
    hypcov = [...
        0, ...
        zeros(1, Nins), 0, ...    % non-temporal
        0, 0, 0, ...  % temporal
        ]';
    
    hypnames = [{'const'},...
        arrayfun(@(d) ['y', num2str(d)], lag_y, 'UniformOutput', false),...
        arrayfun(@(d) ['u', num2str(d)], lag_dr, 'UniformOutput', false),...
        arrayfun(@(d) ['Ta', num2str(d)], lag_Ta, 'UniformOutput', false),...
        arrayfun(@(d) ['h', num2str(d)], lag_humid, 'UniformOutput', false),...
        {'sf', 't', 'sf', 'alpha'}]';
    %}
    
    %{
    % NN
    % Construct the covariance function
    cov = 'covNNone';
    
    hypcov = [0, 0];
    
    hypnames = [arrayfun(@(d) ['y', num2str(d)], lag_y, 'UniformOutput', false),...
        arrayfun(@(d) ['u', num2str(d)], lag_dr, 'UniformOutput', false),...
        arrayfun(@(d) ['Ta', num2str(d)], lag_Ta, 'UniformOutput', false),...
        arrayfun(@(d) ['h', num2str(d)], lag_humid, 'UniformOutput', false),...
        {'t', 'sf', 'alpha'}]';
    %}
    
    %{
    % Matern
    % Construct the covariance function
    cov = {'covMaternard', 5};
    
    hypnames = [arrayfun(@(d) ['y', num2str(d)], lag_y, 'UniformOutput', false),...
        arrayfun(@(d) ['u', num2str(d)], lag_dr, 'UniformOutput', false),...
        arrayfun(@(d) ['Ta', num2str(d)], lag_Ta, 'UniformOutput', false),...
        arrayfun(@(d) ['h', num2str(d)], lag_humid, 'UniformOutput', false),...
        {'t', 'sf'}]';
    %}


    training_result = struct;
    training_result.stepsahead = stepsahead;
    %training_result.hypnames = hypnames;
    training_result.model_inputs = model_inputs;
    training_result.model_target = model_target;
    training_result.model_excepts = model_excepts;
    
    [training_result.hyp, training_result.flogtheta, training_result.model] = control_train_gpml(Xtrain_norm, Ytrain_norm, model, hyp0,...
        @minimize_minfunc, -100);
    
    % Validate by performing 1-step predictions, then compute several measures
    % compared to the real outputs
    [Xtest_norm, ~] = construct_data(data_test_norm, model_inputs, model_target, stepsahead, model_excepts);
    [~, Ytest] = construct_data(data_test, model_inputs, model_target, stepsahead, model_excepts);
    
    validation_result = control_validation_gpml(training_result.model, training_result.hyp, ...
        Xtrain_norm, Ytrain_norm, Xtest_norm, Ytest, normparams.(model_target).min, normparams.(model_target).max);
    
    matfilename = fullfile(sprintf('%s_ahead%02d_%s', data_train_type, stepsahead, postfix));  % 'feature_selection', 
    save(matfilename, 'training_result', 'validation_result', 'normparams', 'Xtrain_norm', 'Ytrain_norm'); 
end